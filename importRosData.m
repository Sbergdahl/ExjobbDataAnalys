function [time,fieldtransforms0headerstamp,fieldtransforms0transformtranslationx,fieldtransforms0transformtranslationy,fieldtransforms0transformrotationz,fieldtransforms0transformrotationw] = importRosData(path,filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as column vectors.
%   [TIME,FIELDTRANSFORMS0HEADERSTAMP,FIELDTRANSFORMS0TRANSFORMTRANSLATIONX,FIELDTRANSFORMS0TRANSFORMTRANSLATIONY,FIELDTRANSFORMS0TRANSFORMROTATIONZ,FIELDTRANSFORMS0TRANSFORMROTATIONW]
%   = IMPORTFILE(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   [TIME,FIELDTRANSFORMS0HEADERSTAMP,FIELDTRANSFORMS0TRANSFORMTRANSLATIONX,FIELDTRANSFORMS0TRANSFORMTRANSLATIONY,FIELDTRANSFORMS0TRANSFORMROTATIONZ,FIELDTRANSFORMS0TRANSFORMROTATIONW]
%   = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW
%   through ENDROW of text file FILENAME.
%
% Example:
%   [time,fieldtransforms0headerstamp,fieldtransforms0transformtranslationx,fieldtransforms0transformtranslationy,fieldtransforms0transformrotationz,fieldtransforms0transformrotationw] = importfile('output2.csv',1, 3187);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2018/12/11 13:02:34

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 1;
    endRow = inf;
end

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%*s%s%*s%*s%s%s%*s%*s%*s%s%s%[^\n\r]';

%% Open the text file.
filename=fullfile(path,filename)
fileID = fopen(filename,'r');

%%

%%determine file size OBS detta är plattforms specifikt för windows
[status, cmdout] = system(['find /c /v "" ', filename]);
    if(status~=1)
        scanCell = textscan(cmdout,'%s %s %u');
        lineCount = scanCell{3};
        disp(['Found ', num2str(lineCount), ' lines in the file']);
    end
    endRow = lineCount;



%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains(',')
                thousandsRegExp = '^[-/+]*\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names
time = cell2mat(raw(:, 1));
fieldtransforms0headerstamp = cell2mat(raw(:, 2));
fieldtransforms0transformtranslationx = cell2mat(raw(:, 3));
fieldtransforms0transformtranslationy = cell2mat(raw(:, 4));
fieldtransforms0transformrotationz = cell2mat(raw(:, 5));
fieldtransforms0transformrotationw = cell2mat(raw(:, 6));


